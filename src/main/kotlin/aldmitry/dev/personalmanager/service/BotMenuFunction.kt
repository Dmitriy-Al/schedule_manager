package aldmitry.dev.personalmanager.service

import aldmitry.dev.personalmanager.apptexts.*
import aldmitry.dev.personalmanager.backup.BackupCreator
import aldmitry.dev.personalmanager.backup.ServerBackup
import aldmitry.dev.personalmanager.config.*
import aldmitry.dev.personalmanager.extendfunctions.putData
import aldmitry.dev.personalmanager.model.ClientData
import aldmitry.dev.personalmanager.model.ClientDataDao
import aldmitry.dev.personalmanager.model.User
import aldmitry.dev.personalmanager.model.UserDao
import org.telegram.telegrambots.meta.api.methods.invoices.CreateInvoiceLink
import org.telegram.telegrambots.meta.api.methods.send.SendDocument
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText
import org.telegram.telegrambots.meta.api.objects.InputFile
import org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton
import java.io.File
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.*
import kotlin.collections.ArrayList
import kotlin.collections.HashMap

class BotMenuFunction : BotMenuInterface {

    // –°–ø–∏—Å–æ–∫ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    private val adminMenuList = listOf(callData_loadSettings, callData_editeUser, callData_messageToAllUsers,
    callData_messageToUser, callData_messageToMainMenu, callData_specMenu, callData_cleanChatMenu, callData_backupMenu)

    // –°–ø–∏—Å–æ–∫ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    private val specialistMenuList = listOf(callData_setAppointment, callData_appointmentToMe, callData_addNewClient,
            callData_clientBaseMenu, callData_myAccount)

    // –°–ø–∏—Å–æ–∫ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∫–ª–∏–µ–Ω—Ç–∞
    private val clientMenuList = listOf(callData_myAppointment, callData_regAsSpec)

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏-–ª–∏–Ω–∏–∏ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ üü©, –¥–ª–∏–Ω–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–µ–º–∞ –∫–ª–∏–µ–Ω—Ç–∞
    private fun createTimeLine(timeLength: String): String {
        val builder: StringBuilder = StringBuilder()
        try {
            val length = timeLength.toInt()
            if (length < 30) {
                builder.append("\uD83D\uDFE9")
            } else {
                repeat (length / 30) {
                    builder.append("\uD83D\uDFE9")
                }
            }
        } catch (e: NumberFormatException) {
            builder.append("\uD83D\uDFE9")
        }
        return builder.toString()
    }

    // –≠–∫—Ä–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    override fun createButtonSet(textForButton: List<String>): InlineKeyboardMarkup {
        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()

        for (element in textForButton) {
            val rowInlineButton = ArrayList<InlineKeyboardButton>()
            val button = InlineKeyboardButton()
            button.putData(element, element)
            rowInlineButton.add(button)
            rowsInline.add(rowInlineButton)
        }
        inlineKeyboardMarkup.keyboard = rowsInline
        return inlineKeyboardMarkup
    }

    // –≠–∫—Ä–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è callBackData
    override fun createDataButtonSet(textForButton: List<String>, callBackData: String): InlineKeyboardMarkup {
        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()

        for (element in textForButton) {
            val rowInlineButton = ArrayList<InlineKeyboardButton>()
            val button = InlineKeyboardButton()
            button.putData(element, element + callBackData)
            rowInlineButton.add(button)
            rowsInline.add(rowInlineButton)
        }
        inlineKeyboardMarkup.keyboard = rowsInline
        return inlineKeyboardMarkup
    }

    // –ú–µ–Ω—é —Å –æ–¥–Ω–æ–π —ç–∫—Ä–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–µ–π
    override fun receiveOneButtonMenu(buttonText: String, buttonData: String): InlineKeyboardMarkup {
        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()

        val rowInlineButton = ArrayList<InlineKeyboardButton>()
        val button = InlineKeyboardButton()
        button.putData(buttonText, buttonData)
        rowInlineButton.add(button)
        rowsInline.add(rowInlineButton)
        inlineKeyboardMarkup.keyboard = rowsInline
        return inlineKeyboardMarkup
    }

    // –ú–µ–Ω—é —Å –¥–≤—É–º—è —ç–∫—Ä–∞–Ω–Ω—ã–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
    override fun receiveTwoButtonsMenu(firstButtonText: String, firstData: String, secondButtonText: String,
                                       secondData: String): InlineKeyboardMarkup {
        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()
        val firstRowInlineButton = ArrayList<InlineKeyboardButton>()

        val firstButton = InlineKeyboardButton()
        firstButton.putData(firstButtonText, firstData)
        firstRowInlineButton.add(firstButton)

        val secondButton = InlineKeyboardButton()
        secondButton.putData(secondButtonText, secondData)
        firstRowInlineButton.add(secondButton)

        rowsInline.add(firstRowInlineButton)
        inlineKeyboardMarkup.keyboard = rowsInline
        return inlineKeyboardMarkup
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —á–∞—Ç
    fun sendBackup(longChatId: Long, textForMessage: String, backupDirectory: String): SendDocument {
        val sendDocument = SendDocument()
        sendDocument.setChatId(longChatId)
        sendDocument.document = InputFile(File(backupDirectory))
        sendDocument.caption = textForMessage
        return sendDocument
    }

    // –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    fun receiveSubscriptionMessage(intMessageId: Int, stringChatId: String): EditMessageText {
        val editMessageText = EditMessageText() // –≤ –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        val textForMessage = "$text_limitPartOne${config_freeClientsAmount}$text_limitPartTwo${config_maxClientsAmount}."
        editMessageText.putData(stringChatId, intMessageId, textForMessage)
        editMessageText.replyMarkup = receiveTwoButtonsMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu,
                "–ê–±–æ–Ω–µ–º–µ–Ω—Ç", callData_paymentMenu)
        return editMessageText
    }

    // –ú–µ–Ω—é –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞-user
    fun receiveClientMessage(stringChatId: String): SendMessage {
        val sendMessage = SendMessage(stringChatId, text_clientStartMessage)
        sendMessage.replyMarkup = createButtonSet(clientMenuList)
        return sendMessage
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞–ø–∏—Å–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
    fun receiveClientEditMessage (stringChatId: String, intMessageId: Int): EditMessageText {
        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, text_clientStartMessage)
        editMessageText.replyMarkup = createButtonSet(clientMenuList)
        return editMessageText
    }

    // –ú–µ–Ω—é –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞-user
    fun receiveSpecialistSendMessage(longChatId: Long, stringChatId: String, textForStartMessage: String,
                                     clientRepository: ClientDataDao): SendMessage {
        val textForMessage = receiveTextForStartMessage(longChatId, textForStartMessage, clientRepository)
        val sendMessage = SendMessage(stringChatId, textForMessage)
        sendMessage.replyMarkup = createButtonSet(specialistMenuList)
        return sendMessage
    }

    // –ú–µ–Ω—é –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞-user
    fun receiveSpecialistEditMessage(longChatId: Long, stringChatId: String, intMessageId: Int,
                                     textForStartMessage: String, clientRepository: ClientDataDao): EditMessageText {
        val textForMessage = receiveTextForStartMessage(longChatId, textForStartMessage, clientRepository)
        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, textForMessage)
        editMessageText.replyMarkup = createButtonSet(specialistMenuList)
        return editMessageText
    }

    // –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–≤–æ–¥–∞
    fun receivePaymentMenu(stringChatId: String, intMessageId: Int, paymentPassword: String): EditMessageText {
        val textForMessage: String = "$text_subscriptionOne$config_subscriptionPrice ‚ÇΩ –∑–∞ –∫–∞–∂–¥—ã–µ $config_subscriptionDays" +
                "$text_subscriptionTwo${(config_subscriptionDays * 3)} –¥–Ω–µ–π –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å ${(config_subscriptionPrice * 3)}" +
                "$text_subscriptionThree$config_payCard$text_subscriptionFour $paymentPassword"

        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, textForMessage)
        editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        return editMessageText
    }

    // –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user
    fun upSubscription(stringChatId: String, intMessageId: Int, subscriptionMonth: String, userId: String, userRepository: UserDao): EditMessageText {
        val subscriptionDays = (subscriptionMonth.toLong()) * config_subscriptionDays
        val user = userRepository.findById(userId.toLong()).get()
        val date = LocalDate.parse(user.paymentDate)
        val newDate = date.plusDays(subscriptionDays)
        user.paymentDate = newDate.toString()
        userRepository.save(user)
        return EditMessageText().putData(stringChatId, intMessageId,
            "$text_paymentThree${user.chatId}$text_paymentFour$date$text_paymentFive${user.paymentDate}")
    }

    // –¢–µ–∫—Å—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞-user
    private fun receiveTextForStartMessage(longChatId: Long, textForStartMessage: String,
                                           clientRepository: ClientDataDao): String {
        val textForMessageLength: Int
        val localDate = LocalDate.now()
        val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
        val textForMessage = StringBuilder()
        val clientData = clientRepository.findAll()
        val nextDate: String? = clientData.filter { it.specialistId == longChatId && it.appointmentDate.length == 10 &&
                localDate.isBefore(LocalDate.parse(it.appointmentDate)) }.minByOrNull { it.appointmentDate }?.appointmentDate

        if (nextDate.isNullOrEmpty()) {
            textForMessage.append("$text_info$textForStartMessage$text_infoOne")
        } else {
            textForMessage.append("$text_info$textForStartMessage$text_infoTwo${formatter.format(LocalDate.parse(nextDate))}:")
        }

        clientData.filter { it.specialistId == longChatId && it.appointmentDate == nextDate }.sortedBy { it.appointmentTime}.
        forEach { textForMessage.append("\n${it.visitAgreement} ${it.appointmentTime} - ${it.secondName} " +
                "${it.firstName.first()}. ${it.patronymic.first()}.") }

        textForMessage.append(text_todayAppointment)
        textForMessageLength = textForMessage.length
        clientData.filter { it.specialistId == longChatId && it.appointmentDate.length == 10 && it.appointmentDate ==
                localDate.toString() && it.visitAgreement != "‚úñ" }.sortedBy { it.appointmentTime}.forEach { textForMessage.
        append("\n‚Ä¢ ${it.appointmentTime} - ${it.secondName} ${it.firstName.first()}. ${it.patronymic.first()}.") }
        if (textForMessageLength == textForMessage.length) textForMessage.append(" –Ω–µ—Ç.")
        return textForMessage.toString()
    }

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ user
    fun sendMessageToUser(updateMessageText: String): SendMessage {
        val splitMessageText = updateMessageText.split("#")
        val sendMessage = SendMessage(splitMessageText[0], "$text_adminMessage${splitMessageText[1]}")
        sendMessage.replyMarkup = receiveOneButtonMenu(okButton, callData_delMessage)
        return sendMessage
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ç–æ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user
    fun sendMessageToAdminNotification(stringChatId: String, intMessageId: Int): EditMessageText {
        val editMessageText = EditMessageText().putData(stringChatId, intMessageId, text_sentMessage)
        editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        return editMessageText
    }

    // –ú–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    fun specialistUserMenu(longChatId: Long, stringChatId: String, intMessageId: Int, textForStartMessage: String,
                           clientRepository: ClientDataDao): EditMessageText {
        return  receiveSpecialistEditMessage(longChatId, stringChatId, intMessageId, textForStartMessage, clientRepository)
    }

    // –ú–µ–Ω—é –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    fun receiveAdministratorSendMessage(stringChatId: String, textForStartMessage: String, saveMessageIdSize: Int,
                                        userRepository: UserDao, clientRepository: ClientDataDao): SendMessage {
        val specialists = userRepository.findAll().filter { it.profession.isNotEmpty() }
        val textForMessage = "$textForStartMessage\uD83D\uDD30  " +
                "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã: $config_payCard\npayToken: $config_payToken" +
                "\n–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–º–µ—Å.): $config_trialPeriod\n–î–æ—Å—Ä–æ—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∑–∞ (–¥–Ω–µ–π): " +
                "$config_paymentBefore\n–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${config_freeClientsAmount}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ " +
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: $config_maxClientsAmount\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (–¥–Ω–µ–π): " +
                "$config_subscriptionDays\n–¶–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (—Ä—É–±.): $config_subscriptionPrice\n–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ " +
                "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É backup (—á–∞—Å –ú—Å–∫.): $config_createBackupTime\nuserBackupTitle: " +
                "$config_userBackupTitle\nclientBackupTitle: $config_userBackupTitle\nuserXmlGroupTitle: " +
                "$config_userXmlGroupTitle\nclientXmlGroupTitle: ${config_clientXmlGroupTitle}\nbackupDirectory: " +
                "$config_backupDirectory\n–∞–¥—Ä–µ—Å backup-—Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $config_backupListDirectory\n" +
                "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userRepository.count()}\n–í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: ${specialists.count() - 1}\n" +
                "–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clientRepository.findAll().count()}\n–í—Å–µ–≥–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: $saveMessageIdSize"
        val sendMessage = SendMessage(stringChatId, textForMessage)
        val settingList: List<String> = adminMenuList
        sendMessage.replyMarkup = createButtonSet(settingList)
        return sendMessage
    }

    // –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–ª–∞–≤–∏—à–∏ —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π —Ñ–∞–º–∏–ª–∏–∏
    fun receiveFindClientKeyboard(stringChatId: String, intMessageId: Int, messageText: String,
                                  callBackData: String): EditMessageText {
        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, messageText)

        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()
        val firstRowInlineButton = ArrayList<InlineKeyboardButton>()
        val secondRowInlineButton = ArrayList<InlineKeyboardButton>()
        val thirdRowInlineButton = ArrayList<InlineKeyboardButton>()
        val fourthRowInlineButton = ArrayList<InlineKeyboardButton>()
        val fifthRowInlineButton = ArrayList<InlineKeyboardButton>()

        for (i in '–ê' .. '–Ø') {
            if (i == '–¨' || i == '–™' || i == '–´' || i == '–ô') continue
            when {
                i.code < 1047 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$i", callBackData + i) // #findcli
                    firstRowInlineButton.add(button)
                }

                i.code < 1055 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$i", callBackData + i) // #findcli
                    secondRowInlineButton.add(button)
                }

                i.code < 1062 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$i", callBackData + i) // #findcli
                    thirdRowInlineButton.add(button)
                }

                i.code < 1072 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$i", callBackData + i) // #findcli
                    fourthRowInlineButton.add(button)
                }
            }
        }

        val backButton = InlineKeyboardButton()
        backButton.putData("\uD83D\uDD19  –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callData_mainMenu)
        fifthRowInlineButton.add(backButton)

        val findAllButton = InlineKeyboardButton()
        findAllButton.putData("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", "$callData_allClients$callBackData")
        fifthRowInlineButton.add(findAllButton)

        rowsInline.add(firstRowInlineButton)
        rowsInline.add(secondRowInlineButton)
        rowsInline.add(thirdRowInlineButton)
        rowsInline.add(fourthRowInlineButton)
        rowsInline.add(fifthRowInlineButton)
        inlineKeyboardMarkup.keyboard = rowsInline
        editMessageText.replyMarkup = inlineKeyboardMarkup
        return editMessageText
    }

    // –ú–µ–Ω—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞-user
    fun receiveUserSettingsMenu(stringChatId: String, intMessageId: Int, user: User): EditMessageText {
        val editMessageText = EditMessageText()
        val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
        val textForMessage = "$text_userSettingsMenuOne${user.sendTime}$text_userSettingsMenuTwo" +
                "${user.sendBeforeDays}$text_userSettingsMenuThree${user.timeZone}" +
                "\n\uD83D\uDD38 –§–ò–û: ${user.secondName} ${user.firstName} ${user.patronymic}\n\uD83D\uDD38 " +
                "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${user.profession}" +
                "$text_userSettingsMenuFour${formatter.format(LocalDate.parse(user.paymentDate))}"

        editMessageText.putData(stringChatId, intMessageId, textForMessage)

        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()
        val firstRowInlineButton = ArrayList<InlineKeyboardButton>()
        val secondRowInlineButton = ArrayList<InlineKeyboardButton>()
        val thirdRowInlineButton = ArrayList<InlineKeyboardButton>()
        val fourthRowInlineButton = ArrayList<InlineKeyboardButton>()
        val fifthRowInlineButton = ArrayList<InlineKeyboardButton>()
        val sixthRowInlineButton = ArrayList<InlineKeyboardButton>()
        val seventhRowInlineButton = ArrayList<InlineKeyboardButton>()

        val sendTimeMinus = InlineKeyboardButton()
        sendTimeMinus.putData("‚ûñ  –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏", callData_timeDown)
        firstRowInlineButton.add(sendTimeMinus)

        val sendTimePlus = InlineKeyboardButton()
        sendTimePlus.putData("–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏  ‚ûï", callData_timeUp)
        firstRowInlineButton.add(sendTimePlus)

        val sendDayMinus = InlineKeyboardButton()
        sendDayMinus.putData("‚ûñ  –î–µ–Ω—å —Ä–∞—Å—Å—ã–ª–∫–∏", callData_dayDown)
        secondRowInlineButton.add(sendDayMinus)

        val sendDayPlus = InlineKeyboardButton()
        sendDayPlus.putData("–î–µ–Ω—å —Ä–∞—Å—Å—ã–ª–∫–∏  ‚ûï", callData_dayUp)
        secondRowInlineButton.add(sendDayPlus)

        val timeZoneMinus = InlineKeyboardButton()
        timeZoneMinus.putData("‚ûñ  –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callData_zoneDown)
        thirdRowInlineButton.add(timeZoneMinus)

        val timeZonePlus = InlineKeyboardButton()
        timeZonePlus.putData("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å  ‚ûï", callData_zoneUp)
        thirdRowInlineButton.add(timeZonePlus)

        val clientButton = InlineKeyboardButton()
        clientButton.putData("–ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã –∏ –ª–∏–º–∏—Ç—ã", callData_myClients)
        fourthRowInlineButton.add(clientButton)

        val changeDataButton = InlineKeyboardButton()
        changeDataButton.putData("–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callData_myData)
        fifthRowInlineButton.add(changeDataButton)

        val getBackupButton = InlineKeyboardButton()
        getBackupButton.putData("Backup-—Ñ–∞–π–ª", "$callData_getBackup$stringChatId")
        fifthRowInlineButton.add(getBackupButton)

        val paymentButton = InlineKeyboardButton()
        paymentButton.putData("–ê–±–æ–Ω–µ–º–µ–Ω—Ç", callData_paymentMenu)
        sixthRowInlineButton.add(paymentButton)

        val sendButton = InlineKeyboardButton()
        sendButton.putData("–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callData_messageToSupport)
        sixthRowInlineButton.add(sendButton)

        val backButton = InlineKeyboardButton()
        backButton.putData("\uD83D\uDD19  –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callData_mainMenu)
        seventhRowInlineButton.add(backButton)

        rowsInline.add(firstRowInlineButton)
        rowsInline.add(secondRowInlineButton)
        rowsInline.add(thirdRowInlineButton)
        rowsInline.add(fourthRowInlineButton)
        rowsInline.add(fifthRowInlineButton)
        rowsInline.add(sixthRowInlineButton)
        rowsInline.add(seventhRowInlineButton)
        inlineKeyboardMarkup.keyboard = rowsInline
        editMessageText.replyMarkup = inlineKeyboardMarkup
        return editMessageText
    }

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ backup
    private fun receiveBackupMenuMessage(textForMessage: String, stringChatId: String, messageId: Int): EditMessageText {
        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, messageId, textForMessage)
        editMessageText.replyMarkup = receiveTwoButtonsMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu,
                "–í backup –º–µ–Ω—é", callData_backupMenu)
        return editMessageText
    }

    // –ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –≤—Ä–µ–º—è-–¥–∞—Ç—É –ø—Ä–∏ –≤–≤–æ–¥–µ –§–ò–û –≤ —á–∞—Ç
    fun createClientAppointment(stringChatId: String, messageId: Int, updateMessageText: String, month: String,
                                callData: String, clientRepository: ClientDataDao): EditMessageText {
        val dataText: String = updateMessageText.replace(" :", "").replace(":", " ").
        replace(", ", " ").replace(",", " ").replace(".", "").
        replace(" –≤", "").replace(" —á–∞—Å–æ–≤", "").replace(" –Ω–∞", "").trim()
        val splitText: List<String> = dataText.split(" ")
        val clientSecondName: String = splitText[0]
        val localDate = LocalDate.now()
        val formatter = DateTimeFormatter.ofPattern("yyyy")
        val longChatId = stringChatId.toLong()

        val clients = clientRepository.findAll().filter { it.specialistId == longChatId && it.secondName.
        contains(clientSecondName, true) }

        var textForMessage = "‚Ñπ  "
        val editMessageText = EditMessageText()
        var day = 0
        var hour = 0
        var minute = 0
        val date: String

        try{
            day = splitText[1].replace(" 0", "").toInt()
            hour = splitText[3].replace(" 0", "").toInt()
            minute = splitText[4].replace(" 0", "").toInt()
        } catch (e: NumberFormatException){
            textForMessage = "$textForMessage –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏"
        }

        val stringMinute: String = if (minute < 10 ) "0$minute" else "$minute"
        val stringHour: String = if (hour < 10 ) "0$hour" else "$hour"

        if(clients.isEmpty() || day == 0 || hour == 0 || (minute == 0 && splitText[4] != stringMinute)){
            textForMessage = "$textForMessage –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"
            editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –û—Ç–º–µ–Ω–∞", callData_mainMenu)
        } else {
            val year = if (localDate.month.value <= month.replace(" 0", "").toInt()) {
                formatter.format(localDate).toInt()
            } else {
                formatter.format(localDate).toInt() + 1
            }

            date = if (day < 10) "$year-${month.replace(" ", "")}-0$day" else "$year-${month.
            replace(" ", "")}-$day"
            textForMessage = "\uD83D\uDD30 –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ $day ${splitText[2]} –≤ $hour:$stringMinute –ø–∞—Ü–∏–µ–Ω—Ç–∞:"

            val inlineKeyboardMarkup = InlineKeyboardMarkup()
            val rowsInline = ArrayList<List<InlineKeyboardButton>>()
            for (elem in clients) {
                val rowInlineButton = ArrayList<InlineKeyboardButton>()
                val button = InlineKeyboardButton()
                button.putData("${elem.secondName} ${elem.firstName} ${elem.patronymic}",
                        "$callData${elem.clientId}#$date#$stringHour:$stringMinute#...")
                rowInlineButton.add(button)
                rowsInline.add(rowInlineButton)
            }

            val rowInlineButton = ArrayList<InlineKeyboardButton>()
            val returnButton = InlineKeyboardButton()
            returnButton.putData("\uD83D\uDD19  –û—Ç–º–µ–Ω–∞", callData_mainMenu)
            rowInlineButton.add(returnButton)
            rowsInline.add(rowInlineButton)
            inlineKeyboardMarkup.keyboard = rowsInline
            editMessageText.replyMarkup = inlineKeyboardMarkup
        }
        editMessageText.putData(stringChatId, messageId, textForMessage)
        return editMessageText
    }

    // –ú–µ–Ω—é —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    fun receiveClientBySecondName(intMessageId: Int, stringChatId: String, longChatId: Long, secondNameText: String,
                                  calBackData: String, clientRepository: ClientDataDao): EditMessageText {
        val client = clientRepository.findAll().filter { it.specialistId == longChatId &&
                it.secondName.contains(secondNameText, true) }.filter { it.secondName.first().lowercase() ==
                secondNameText.first().lowercase() }.sortedBy { it.secondName }
        val textForMessage: String
        val editMessageText = EditMessageText()

        if(client.isEmpty()){
            textForMessage = text_clientNotFound
            editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                    callData_mainMenu)

        } else {
            textForMessage = text_chooseClient
            val inlineKeyboardMarkup = InlineKeyboardMarkup()
            val rowsInline = ArrayList<List<InlineKeyboardButton>>()
            for (elem in client) {
                val rowInlineButton = ArrayList<InlineKeyboardButton>()
                val button = InlineKeyboardButton()
                button.putData("${elem.secondName} ${elem.firstName}", "$calBackData${elem.clientId}")
                rowInlineButton.add(button)
                rowsInline.add(rowInlineButton)
            }

            val rowInlineButton = ArrayList<InlineKeyboardButton>()
            val returnButton = InlineKeyboardButton()
            returnButton.putData("\uD83D\uDD19  –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callData_mainMenu)
            rowInlineButton.add(returnButton)
            rowsInline.add(rowInlineButton)
            inlineKeyboardMarkup.keyboard = rowsInline
            editMessageText.replyMarkup = inlineKeyboardMarkup
        }
        editMessageText.putData(stringChatId, intMessageId, textForMessage)
        return editMessageText
    }

    // –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
    fun receiveAppointmentMonth(stringChatId: String, intMessageId: Int, callBackData: String,
                                clientRepository: ClientDataDao): EditMessageText {
        val clientId = callBackData.replace(callData_callBackClientId, "")

        val client: ClientData = clientRepository.findById(clientId.toLong()).get()
        val editMessageText = EditMessageText()
        val date: LocalDate = LocalDate.now()
        val numFormat: DateTimeFormatter = DateTimeFormatter.ofPattern("MM")
        val buttonFormat: DateTimeFormatter = DateTimeFormatter.ofPattern("MM.yyyy")
        val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")

        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()
        val firstRowInlineButton = ArrayList<InlineKeyboardButton>()

        val firstButton = InlineKeyboardButton()
        firstButton.putData(buttonFormat.format(date), "${numFormat.format(date)}@$clientId")
        firstRowInlineButton.add(firstButton)

        val secondButton = InlineKeyboardButton()
        secondButton.putData(buttonFormat.format(date.plusMonths(1)), "${numFormat.
        format(date.plusMonths(1))}@$clientId")
        firstRowInlineButton.add(secondButton)

        val thirdButton = InlineKeyboardButton()
        thirdButton.putData(buttonFormat.format(date.plusMonths(2)), "${numFormat.
        format(date.plusMonths(2))}@$clientId")
        firstRowInlineButton.add(thirdButton)

        val secondRowInlineButton = ArrayList<InlineKeyboardButton>()
        val returnButton = InlineKeyboardButton()
        returnButton.putData("\uD83D\uDD19  –û—Ç–º–µ–Ω–∞", callData_mainMenu)
        secondRowInlineButton.add(returnButton)

        rowsInline.add(firstRowInlineButton)
        rowsInline.add(secondRowInlineButton)
        inlineKeyboardMarkup.keyboard = rowsInline

        editMessageText.replyMarkup = inlineKeyboardMarkup

        val textForMessage: String = if (client.appointmentDate.length == 10 && LocalDate.now().
                isBefore(LocalDate.parse(client.appointmentDate))) {
            "$text_cliAppointmentOne${formatter.format(LocalDate.parse(client.appointmentDate))} –≤ " +
                    "${client.appointmentTime}$text_cliAppointmentTwo"
        } else {
            text_chooseMonth
        }
        editMessageText.putData(stringChatId, intMessageId, textForMessage)
        return editMessageText
    }

    // –ú–µ–Ω—é –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
    fun receiveClientSettingMenu(stringChatId: String, intMessageId: Int, callBackData: String,
                                 isSubscriptionExpire: Boolean, clientRepository: ClientDataDao): EditMessageText {
        val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
        val clientId = callBackData.replace(callData_clientSettingMenu, "")
        val client: ClientData = clientRepository.findById(clientId.toLong()).get()

        val menuList = mutableListOf(callData_clientRemark)

        val appointmentText = if (client.appointmentDate.length != 10) {
            "–Ω–µ—Ç"
        } else {
            menuList.add(callData_removeAppointment)
            "${formatter.format(LocalDate.parse(client.appointmentDate))}  –≤  ${client.appointmentTime} " +
                    "$text_visitDuration ${client.visitDuration} –º–∏–Ω—É—Ç."
        }

        menuList.add(callData_deleteClientMenu)

        if (!isSubscriptionExpire) menuList.add(callData_editeClientName)

        val regText = if (client.chatId.toInt() != 1) {
            text_clientRegistered
        } else {
            menuList.add(callData_generateCode)
            text_canGenPassword
        }

        menuList.add(callData_mainMenu)

        val textForMessage = "$text_forCliMenuOne\n${client.visitHistory}\n\n" +
                "\uD83D\uDD30 –ö–ª–∏–µ–Ω—Ç: ${client.secondName} ${client.firstName} ${client.patronymic}" +
                "\n\n$text_forCliMenuTwo$regText$text_forCliMenuThree$appointmentText"

        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, textForMessage)
        editMessageText.replyMarkup = createDataButtonSet(menuList, clientId)
        return editMessageText
    }

    // –í—ã–±–æ—Ä –¥–Ω—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
    fun receiveAppointmentDay(longChatId: Long, stringChatId: String, intMessageId: Int, callBackData: String,
                              comeBackInfo: HashMap<String, String>, clientRepository: ClientDataDao): EditMessageText {
        val dataString: List<String> = callBackData.split(callData_appointmentDay)
        val appointmentMonth: Int = dataString[0].toInt()
        val clientId: String = dataString[1]
        val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
        val localDate: LocalDate = LocalDate.now()
        val editMessageText = EditMessageText()
        val startDay: Int
        comeBackInfo[stringChatId] = callBackData

        val stringBuilder = StringBuilder(text_appointmentDate)
        val daysAppointment = HashMap<String, Int>()

        val clients = clientRepository.findAll().filter { it.specialistId == longChatId &&
                it.appointmentDate.length == 10 && it.appointmentDate.split("-")[1] == dataString[0] &&
                (localDate.isEqual(LocalDate.parse(it.appointmentDate)) || localDate.isBefore(LocalDate.parse(it.
                appointmentDate))) }.sortedBy { it.appointmentDate }

        clients.forEach { if (daysAppointment[it.appointmentDate] == null) daysAppointment[it.appointmentDate] = 1 else
            daysAppointment[it.appointmentDate] = daysAppointment[it.appointmentDate]!! + 1 }
        daysAppointment.toSortedMap().forEach { stringBuilder.append("‚Ä¢ ${formatter.format(LocalDate.parse(it.key))}   " +
                "–∑–∞–ø–∏—Å–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:   ${it.value}\n") }

        val appointmentDate = if (localDate.monthValue > appointmentMonth) {
            localDate.plusYears(1).withMonth(appointmentMonth)
        } else {
            localDate.withMonth(appointmentMonth)
        }

        if (appointmentDate.monthValue == localDate.monthValue) {
            startDay = localDate.dayOfMonth
            localDate.lengthOfMonth() - localDate.dayOfMonth // return
        } else {
            startDay = 1
            appointmentDate.lengthOfMonth() // return
        }

        val allDays = appointmentDate.lengthOfMonth()

        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()
        val firstRowInlineButton = ArrayList<InlineKeyboardButton>()
        val secondRowInlineButton = ArrayList<InlineKeyboardButton>()
        val thirdRowInlineButton = ArrayList<InlineKeyboardButton>()
        val fourthRowInlineButton = ArrayList<InlineKeyboardButton>()
        val fifthRowInlineButton = ArrayList<InlineKeyboardButton>()

        var iterationCount = 1
        for (day in startDay .. allDays) {
            when {
                iterationCount < 9 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$day", "&$day#$appointmentMonth#$clientId")
                    firstRowInlineButton.add(button)
                }
                iterationCount < 17 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$day", "&$day#$appointmentMonth#$clientId")
                    secondRowInlineButton.add(button)
                }
                iterationCount < 25 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$day", "&$day#$appointmentMonth#$clientId")
                    thirdRowInlineButton.add(button)
                }
                iterationCount < 33 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$day", "&$day#$appointmentMonth#$clientId")
                    fourthRowInlineButton.add(button)
                }
            }
            iterationCount++
        }

        val button = InlineKeyboardButton()
        button.putData("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        fifthRowInlineButton.add(button)

        rowsInline.add(firstRowInlineButton)
        rowsInline.add(secondRowInlineButton)
        rowsInline.add(thirdRowInlineButton)
        rowsInline.add(fourthRowInlineButton)
        rowsInline.add(fifthRowInlineButton)
        inlineKeyboardMarkup.keyboard = rowsInline
        editMessageText.replyMarkup = inlineKeyboardMarkup

        stringBuilder.append(text_chooseDate)

        editMessageText.putData(stringChatId, intMessageId, stringBuilder.toString())
        return editMessageText
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–∞ –ø—Ä–∏–µ–º–∞ –∫–ª–∏–µ–Ω—Ç–∞
    fun receiveAppointmentHour(longChatId: Long, stringChatId: String, intMessageId: Int, callBackData: String,
                               comeBackInfo: HashMap<String, String>, clientRepository: ClientDataDao): EditMessageText {
        val dataText = callBackData.replace(callData_appointmentHour, "")
        val splitData = dataText.split("#")
        val dayOfMonth = if (splitData[0].length == 1) "0${splitData[0]}" else splitData[0]

        val stringBuilder = StringBuilder(text_appointmentTime)
        clientRepository.findAll().filter { it.specialistId == longChatId && it.appointmentDate.length == 10 }.
        filter { it.appointmentDate.split("-")[2] == dayOfMonth }.sortedBy { it.appointmentTime }.
        forEach { stringBuilder.append("‚Ä¢ ${it.appointmentTime}  -  ${it.secondName} ${it.firstName}$text_visitDuration" +
                " ${it.visitDuration} –º–∏–Ω.\n") }

        val editMessageText = EditMessageText()

        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()
        val firstRowInlineButton = ArrayList<InlineKeyboardButton>()
        val secondRowInlineButton = ArrayList<InlineKeyboardButton>()
        val thirdRowInlineButton = ArrayList<InlineKeyboardButton>()
        val fourthRowInlineButton = ArrayList<InlineKeyboardButton>()

        for (i in 0..24) {
            when (i) {
                in 8..15 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$i", "$callData_appointmentMin$i#$dataText")
                    firstRowInlineButton.add(button)
                }

                in 16..23 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$i", "$callData_appointmentMin$i#$dataText")
                    secondRowInlineButton.add(button)
                }

                in 0..8 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$i", "$callData_appointmentMin$i#$dataText")
                    thirdRowInlineButton.add(button)
                }
            }
        }

        val menuButton = InlineKeyboardButton()
        menuButton.putData("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        fourthRowInlineButton.add(menuButton)

        val backButton = InlineKeyboardButton()
        backButton.putData("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", comeBackInfo[stringChatId]!!)
        fourthRowInlineButton.add(backButton)

        rowsInline.add(firstRowInlineButton)
        rowsInline.add(secondRowInlineButton)
        rowsInline.add(thirdRowInlineButton)
        rowsInline.add(fourthRowInlineButton)
        inlineKeyboardMarkup.keyboard = rowsInline

        stringBuilder.append(text_chooseHour)
        editMessageText.putData(stringChatId, intMessageId, stringBuilder.toString())
        editMessageText.replyMarkup = inlineKeyboardMarkup
        return editMessageText
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω—É—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–∏–µ–º
    fun receiveAppointmentMinute(stringChatId: String, intMessageId: Int, callBackData: String,
                                 comeBackInfo: HashMap<String, String>): EditMessageText {
        val dataText = callBackData.replace(callData_appointmentMin, "")
        val splitData = dataText.split("#")
        comeBackInfo[stringChatId] = ""

        val editMessageText = EditMessageText()
        val localDate = LocalDate.now()
        val formatter = DateTimeFormatter.ofPattern("yyyy")
        val clientId: String = splitData[3]
        val month: Int = splitData[2].toInt()
        val stringMonth: String = if (month < 10) "0$month" else "$month"
        val day: String = if (splitData[1].toInt() < 10) "0${splitData[1]}" else splitData[1]
        val hour: String = if (splitData[0].toInt() < 10) "0${splitData[0]}" else splitData[0]


        val year: Int = if (localDate.month.value <= month) {
            formatter.format(localDate).toInt()
        } else {
            formatter.format(localDate).toInt() + 1
        }

        val date = "$year-$stringMonth-$day"

        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()
        val firstRowInlineButton = ArrayList<InlineKeyboardButton>()
        val secondRowInlineButton = ArrayList<InlineKeyboardButton>()
        val thirdRowInlineButton = ArrayList<InlineKeyboardButton>()

        for (i in 5..56) {
            when {
                i == 5 -> {
                    val button = InlineKeyboardButton()
                    button.putData("05", "$callData_duration$clientId#$date#$hour:05")
                    firstRowInlineButton.add(button)
                }

                i % 5 == 0 && i < 35 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$i", "$callData_duration$clientId#$date#$hour:$i")
                    firstRowInlineButton.add(button)
                }

                i % 5 == 0 -> {
                    val button = InlineKeyboardButton()
                    button.putData("$i", "$callData_duration$clientId#$date#$hour:$i")
                    secondRowInlineButton.add(button)
                }

                i == 56 -> {
                    val button = InlineKeyboardButton()
                    button.putData("00", "$callData_duration$clientId#$date#$hour:00")
                    secondRowInlineButton.add(button)
                }
            }
        }

        val menuButton = InlineKeyboardButton()
        menuButton.putData("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        thirdRowInlineButton.add(menuButton)

        rowsInline.add(firstRowInlineButton)
        rowsInline.add(secondRowInlineButton)
        rowsInline.add(thirdRowInlineButton)
        inlineKeyboardMarkup.keyboard = rowsInline

        val textForMessage = text_chooseMinute
        editMessageText.putData(stringChatId, intMessageId, textForMessage)
        editMessageText.replyMarkup = inlineKeyboardMarkup
        return editMessageText
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–µ–º–∞
    fun receiveVisitDuration(stringChatId: String, intMessageId: Int, callBackData: String): EditMessageText {
        val dataString: String = callBackData.replace(callData_duration, "")
        val editMessageText = EditMessageText()

        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()
        val firstRowInlineButton = ArrayList<InlineKeyboardButton>()
        val secondRowInlineButton = ArrayList<InlineKeyboardButton>()
        val thirdRowInlineButton = ArrayList<InlineKeyboardButton>()
        val fourthRowInlineButton = ArrayList<InlineKeyboardButton>()
        val fifthRowInlineButton = ArrayList<InlineKeyboardButton>()
        val sixthRowInlineButton = ArrayList<InlineKeyboardButton>()

        for (i in 1 .. 30) {
            when (i) {
                in 1 .. 6 -> {
                    val button = InlineKeyboardButton()
                    button.putData("${i}0", "$callData_clientData$dataString#${i}0")
                    firstRowInlineButton.add(button)
                }

                in 7 .. 12 -> {
                    val button = InlineKeyboardButton()
                    button.putData("${i}0", "$callData_clientData$dataString#${i}0")
                    secondRowInlineButton.add(button)
                }

                in 13 .. 18 -> {
                    val button = InlineKeyboardButton()
                    button.putData("${i}0", "$callData_clientData$dataString#${i}0")
                    thirdRowInlineButton.add(button)
                }

                in 19 .. 24 -> {
                    val button = InlineKeyboardButton()
                    button.putData("${i}0", "$callData_clientData$dataString#${i}0")
                    fourthRowInlineButton.add(button)
                }

                in 25 .. 30 -> {
                    val button = InlineKeyboardButton()
                    button.putData("${i}0", "$callData_clientData$dataString#${i}0")
                    fifthRowInlineButton.add(button)
                }
            }
        }

        val menuButton = InlineKeyboardButton()
        menuButton.putData("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        sixthRowInlineButton.add(menuButton)

        rowsInline.add(firstRowInlineButton)
        rowsInline.add(secondRowInlineButton)
        rowsInline.add(thirdRowInlineButton)
        rowsInline.add(fourthRowInlineButton)
        rowsInline.add(fifthRowInlineButton)
        rowsInline.add(sixthRowInlineButton)
        inlineKeyboardMarkup.keyboard = rowsInline

        val textForMessage = text_setDurationTime
        editMessageText.putData(stringChatId, intMessageId, textForMessage)
        editMessageText.replyMarkup = inlineKeyboardMarkup
        return editMessageText
    }

    // –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ user
    fun changeUserData(stringChatId: String, intMessageId: Int, callBackData: String, tempData: HashMap<String, String>,
                       userRepository: UserDao): EditMessageText {
        val idData = callBackData.replace(callData_changeUser, "").split(" ")
        val userId = idData[0]
        val user = userRepository.findById(userId.toLong()).get()

        val textForMessage = "$text_changeUserDataOne${user.secondName}\n–ò–º—è: ${user.firstName}\n–û—Ç—á–µ—Å—Ç–≤–æ: " +
                "${user.patronymic}\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${user.profession}\n‚ùó –ù–µ–∏–∑–º–µ–Ω—è–µ–º–æ–µ –ø–æ–ª–µ Chat id: ${user.chatId}\n–ü–∞—Ä–æ–ª—å: " +
                "${user.password}\n–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É: ${user.sendTime}\n–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: ${user.timeZone}" +
                "\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–Ω–µ–π –¥–æ –ø—Ä–∏–µ–º–∞: ${user.sendBeforeDays}\n–î–∞—Ç–∞ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: " +
                "${user.paymentDate}$text_changeUserDataTwo"

        val editMessageText = EditMessageText().putData(stringChatId, intMessageId, textForMessage)
        editMessageText.replyMarkup = receiveTwoButtonsMenu("‚ùó –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "$callData_delAllUserData$userId", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  \uD83D\uDD19", callData_mainMenu)
        tempData[stringChatId] = input_changeUser
        return editMessageText
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    fun saveHistoryOfAppointment(clientRepository: ClientDataDao) {
        val localDate = LocalDate.now()
        val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
        clientRepository.findAll().filter { localDate.minusDays(1).toString() == it.appointmentDate &&
                it.visitAgreement != xSym}.forEach { it.visitHistory = "${it.visitHistory}\n‚Ä¢ ${formatter.format(localDate
                .minusDays(1))} –≤ ${it.appointmentTime}"; clientRepository.save(it) }
    }

    // –û—Ç–º–µ–Ω–∞ –≤–∏–∑–∏—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
    fun removeClientsAppointment(clientRepository: ClientDataDao) {
        val localDate = LocalDate.now()
        clientRepository.findAll().filter { localDate.minusDays(1).toString() == it.appointmentDate &&
                it.visitAgreement != wqSym && it.visitAgreement != qSym}.forEach {it.appointmentDate = "";
            it.appointmentTime = ""; it.visitDuration = "..."; it.visitAgreement = wqSym; clientRepository.save(it) }
    }

    // –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    fun changeUserData(updateMessageText: String, stringChatId: String, tempData: HashMap<String, String>, intMessageId: Int,
                       userRepository: UserDao): EditMessageText {
        tempData[stringChatId] = plugText
        val changeData = updateMessageText.split("#")
        val editMessageText = EditMessageText()

        if (changeData.size !in 10..11) {
            editMessageText.putData(stringChatId, intMessageId, text_wrongText)
        } else {
            val newUser = userRepository.findById(changeData[4].toLong()).get()
            val userChatId: Long = if (changeData.size == 11) changeData[10].toLong() else changeData[4].toLong()

            newUser.secondName = changeData[0]
            newUser.firstName = changeData[1]
            newUser.patronymic = changeData[2]
            newUser.profession = changeData[3]
            newUser.password = changeData[5]
            newUser.sendTime = changeData[6].toInt()
            newUser.timeZone = changeData[7].toLong()
            newUser.sendBeforeDays = changeData[8].toLong()
            newUser.paymentDate = changeData[9]
            newUser.chatId = userChatId
            userRepository.save(newUser)

            val user = userRepository.findById(userChatId).get()
            val textForMessage = "$text_userData${user.secondName}\n–ò–º—è: " +
                    "${user.firstName}\n–û—Ç—á–µ—Å—Ç–≤–æ: ${user.patronymic}\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${user.profession}\nChat id: ${user.chatId}\n" +
                    "–ü–∞—Ä–æ–ª—å: ${user.password}\n–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É: ${user.sendTime}\n–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: ${user.timeZone}" +
                    "\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–Ω–µ–π –¥–æ –ø—Ä–∏–µ–º–∞: ${user.sendBeforeDays}\n–î–∞—Ç–∞ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${user.paymentDate}"

            editMessageText.putData(stringChatId, intMessageId, textForMessage)
            editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        }
        return editMessageText
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ client backup –≤ —Å–µ—Ä–≤–µ—Ä
    fun putClientBackupToServer(stringChatId: String, intMessageId: Int, directory: String, tempData: HashMap<String,
            String>, clientRepository: ClientDataDao): EditMessageText {
        tempData[stringChatId] = plugText
        val backupDirectory: String = directory + config_clientBackupTitle
        val serverBackup = ServerBackup()

        serverBackup.startBackup(backupDirectory)
        val clientsList: MutableList<ClientData> = serverBackup.receiveClientsBackup(mutableListOf())
        clientRepository.deleteAll()
        clientsList.forEach { clientRepository.save(it) }
        val clientsAmount: Int = clientRepository.findAll().count()

        val textForMessage = "$text_setBackupOne$clientsAmount$text_setBackupTwo$backupDirectory"
        return receiveBackupMenuMessage(textForMessage, stringChatId, intMessageId)
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ user backup –≤ —Å–µ—Ä–≤–µ—Ä
    fun putUserBackupToServer(stringChatId: String, intMessageId: Int, longChatId: Long, directory: String,
                              tempData: HashMap<String, String>, userRepository: UserDao): EditMessageText {
        tempData[stringChatId] = plugText
        val backupDirectory: String = directory + config_userBackupTitle
        val serverBackup = ServerBackup()

        serverBackup.startBackup(backupDirectory)
        val usersList: MutableList<User> = serverBackup.receiveUsersBackup(mutableListOf())
        usersList.filter { it.chatId != longChatId }.forEach { userRepository.save(it) }
        val usersAmount: Int = userRepository.findAll().count()

        val textForMessage = "$text_setBackupOne$usersAmount$text_setBackupTwo$backupDirectory"
        return receiveBackupMenuMessage(textForMessage, stringChatId, intMessageId)
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ backup –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    fun createBackupInDirectory(stringChatId: String, intMessageId: Int, savedGroupTitle: String, directory: String,
                                backupTitle: String, savedGroupList: List<String>): EditMessageText {
        val backupDirectory = directory + backupTitle
        val backupCreator = BackupCreator()
        val backupFile = backupCreator.receiveBackupFile(savedGroupTitle, savedGroupList)
        backupCreator.createBackupXml(backupFile, backupDirectory)
        val textForMessage = "$text_createBackupOne$savedGroupTitle$text_createBackupTwo$backupDirectory"

        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, textForMessage)
        editMessageText.replyMarkup = receiveTwoButtonsMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callData_mainMenu, "–í backup –º–µ–Ω—é", callData_backupMenu)
        return editMessageText
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    fun repairUserAccount(stringChatId: String, intMessageId: Int, longChatId: Long, updateMessageText: String,
                          userRepository: UserDao, clientRepository: ClientDataDao): EditMessageText {
        val oldUser: User
        val user = userRepository.findById(longChatId).get()
        val users = userRepository.findAll().filter { it.chatId != user.chatId && it.password == updateMessageText &&
                it.secondName == user.secondName && it.firstName == user.firstName && it.patronymic == user.patronymic }
        val editMessageText = EditMessageText()

        if (users.isNotEmpty() && users.size == 1) {
            oldUser = users[0]
            clientRepository.findAll().filter { it.specialistId == oldUser.chatId
            }.forEach { it.specialistId = longChatId; clientRepository.save(it) }
            user.password = oldUser.password
            userRepository.save(user)
            userRepository.delete(oldUser)

            editMessageText.putData(stringChatId, intMessageId, text_accountRepaired)
            editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_backupMenu)
        } else {
            editMessageText.putData(stringChatId, intMessageId, text_err)
            editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        }
        return editMessageText
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
    fun setUserPassword(stringChatId: String, intMessageId: Int, longChatId: Long, updateMessageText: String,
                        userRepository: UserDao): EditMessageText {
        val editMessageText = EditMessageText()

        if (updateMessageText.length in 5..15) {
            val user = userRepository.findById(longChatId).get()
            user.password = updateMessageText
            userRepository.save(user)
            editMessageText.putData(stringChatId, intMessageId, "$text_setPass$updateMessageText")
        } else {
            editMessageText.putData(stringChatId, intMessageId, "$text_errPassOne$updateMessageText$text_errPassTwo")
        }
        editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        return editMessageText
    }

    // –í–≤–æ–¥ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ
    fun inputOldUserPassword(stringChatId: String, intMessageId: Int, longChatId: Long, tempData: HashMap<String, String>,
                             updateMessageText: String, userRepository: UserDao): EditMessageText {
        val user = userRepository.findById(longChatId).get()
        val editMessageText = EditMessageText()

        if (updateMessageText == user.password) {
            tempData[stringChatId] = input_password
            editMessageText.putData(stringChatId, intMessageId, text_passwordAccepted)
        } else {
            editMessageText.putData(stringChatId, intMessageId, text_err)
        }
        editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        return editMessageText
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
    fun addClientRemark(stringChatId: String, intMessageId: Int, savedId: HashMap<String, Long>, updateMessageText: String,
                        clientRepository: ClientDataDao): EditMessageText {
        val client = clientRepository.findById(savedId[stringChatId]!!).get()
        val editMessageText = EditMessageText()

        if (client.remark.length < 3000) {
            val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")

            val remarkText = if (client.remark.isNotEmpty()) {
                "${client.remark}\n‚Ä¢ ${formatter.format(LocalDate.now())}:  $updateMessageText"
            } else {
                "‚Ä¢ ${formatter.format(LocalDate.now())}:  $updateMessageText"
            }

            client.remark = remarkText
            clientRepository.save(client)

            editMessageText.putData(stringChatId, intMessageId, "$text_remarkAddOne${client.remark}$text_remarkAddTwo")
        } else {
            editMessageText.putData(stringChatId, intMessageId, "$text_remarkAddOne${client.remark}$text_remarkAddThree")
        }
        editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        return editMessageText
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ backup –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    fun createDefaultBackup(stringChatId: String, intMessageId: Int, backupTitle: String,
                            elementList: List<String>): EditMessageText {
        val backupDirectory: String = config_backupDirectory + backupTitle
        val backupCreator = BackupCreator()
        val backupFile = backupCreator.receiveBackupFile(backupTitle, elementList)
        backupCreator.createBackupXml(backupFile, backupDirectory)
        val textForMessage = "$text_createBackupOne$backupTitle$text_createBackupTwo$backupDirectory"

        val editMessageText = EditMessageText().putData(stringChatId, intMessageId, textForMessage)
        editMessageText.replyMarkup = receiveTwoButtonsMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu,
                "–í backup –º–µ–Ω—é", callData_backupMenu)
        return editMessageText
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
    fun lookClientAppointment(longChatId: Long, stringChatId: String, intMessageId: Int, clientRepository: ClientDataDao,
                              userRepository: UserDao): EditMessageText {
        val firstText = text_yourAppointment
        val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
        val localDate = LocalDate.now()
        val textForMessage = StringBuilder()
        textForMessage.append(firstText)

        clientRepository.findAll().filter { it.chatId == longChatId && it.appointmentDate.length == 10 &&
                (localDate.isEqual(LocalDate.parse(it.appointmentDate)) || localDate.isAfter(LocalDate.parse(it.appointmentDate))) }.
        sortedBy { it.appointmentDate }.forEach { textForMessage.append("\n\uD83D\uDD39 ${userRepository.findById(it.specialistId).
        get().profession}, ${formatter.format(LocalDate.parse(it.appointmentDate))} –≤ ${it.appointmentTime}") }

        if (textForMessage.toString() == firstText) textForMessage.append(" –Ω–µ—Ç –∑–∞–ø–∏—Å–∏.")

        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, textForMessage.toString())
        editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callData_mainMenu)
        return editMessageText
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    fun generateCode(stringChatId: String, callBackData: String, intMessageId: Int, savedId: HashMap<String, Long>,
                     registerPassword: HashMap<String, Int>, clientIdExistCheck: HashMap<String, String>): EditMessageText {
        val clientId = callBackData.replace(callData_generateCode, "")
        var password: Int
        savedId[stringChatId] = 0
        var isSinglePassword = false

        if (registerPassword[stringChatId] == null || registerPassword[stringChatId] == 0){
            password = 0
            while (!isSinglePassword){
                password = (100..999).random()
                for ((_, value) in registerPassword) {
                    if (value == password) break
                }
                isSinglePassword = true
            }
            registerPassword[stringChatId] = password
        } else {
            password = registerPassword[stringChatId]!!
        }

        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, "$text_addClientOne$password$text_addClientTwo")
        editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callData_mainMenu)
        clientIdExistCheck[stringChatId] = clientId
        return editMessageText
    }

    // –ú–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö –∏ –∫–ª–∏–µ–Ω—Ç–∞—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    fun receiveClientsMenu(longChatId: Long, stringChatId: String, intMessageId: Int, clientRepository: ClientDataDao,
                           userRepository: UserDao): EditMessageText {

        val user = userRepository.findById(longChatId).get()
        val userPaymentDate = LocalDate.parse(user.paymentDate)
        val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
        val paymentDate = formatter.format(userPaymentDate)
        val localDate = LocalDate.now()
        val clients = clientRepository.findAll().filter { it.specialistId == longChatId }
        val amount = clients.size

        var textForMessage = "$text_clientLimitFour$amount\n\n$text_subscriptionTime$paymentDate\n"

        textForMessage += if (localDate.isAfter(userPaymentDate)){
            if ((config_freeClientsAmount - amount) > 0){
                "$text_clientLimitFive${config_freeClientsAmount}$text_clientLimitSix${config_freeClientsAmount - amount}" +
                "$text_clientLimitOne${config_maxClientsAmount}$text_clientLimitTwo${config_maxClientsAmount}$text_clientLimitThree"
            } else {
                "$text_clientLimitFive${config_freeClientsAmount}$text_clientLimitEight$text_clientLimitOne" +
                "${config_maxClientsAmount}$text_clientLimitTwo${config_maxClientsAmount}$text_clientLimitThree"
            }
        } else {
            if ((config_maxClientsAmount - amount) > 0) {
                "$text_clientLimitFive${config_maxClientsAmount}$text_clientLimitSix${config_maxClientsAmount - amount}"
            } else {
                "$text_clientLimitFive${config_maxClientsAmount}$text_clientLimitSeven"
            }
        }

        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, textForMessage)
        editMessageText.replyMarkup = receiveTwoButtonsMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu,
                "–ù–∞–∑–∞–¥  ‚öô", callData_myAccount)
        return editMessageText
    }

    // –ú–µ–Ω—é —Å –∑–∞–ø–∏—Å—å—é –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
    fun receiveSchedule(longChatId: Long, stringChatId: String, intMessageId: Int, clientRepository: ClientDataDao): EditMessageText {
        val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
        var dateText = ""
        val textForMessage = StringBuilder()
        val localDate = LocalDate.now()
        textForMessage.append(text_yourSchedule)

        clientRepository.findAll().filter { it.specialistId == longChatId && it.appointmentDate.length == 10 &&
                !localDate.isAfter(LocalDate.parse(it.appointmentDate)) }.sortedBy { it.appointmentDate }.asReversed()
            .forEach { textForMessage.append( "\n" + (if (dateText == it.appointmentDate) "" else "\n") + "\uD83D\uDD39 " +
                    "${formatter.format(LocalDate.parse(it.appointmentDate))} –≤ " + "${it.appointmentTime}  - ${it.secondName} " +
                    "${it.firstName.first()}.\n${createTimeLine(it.visitDuration)} ${it.visitDuration} –º–∏–Ω.");
                dateText = it.appointmentDate }

        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, textForMessage.toString())
        editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callData_mainMenu)
        return editMessageText
    }

    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    fun receiveAllClients(longChatId: Long, stringChatId: String, callBackData: String, intMessageId: Int,
                          clientRepository: ClientDataDao): EditMessageText {
        val returnBackData = callBackData.replace(callData_allClients, "")
        val clientsList = mutableListOf<String>()
        val clients = clientRepository.findAll().filter { it.specialistId == longChatId }.sortedBy { it.secondName }

        clients.distinctBy { it.secondName }.forEach { clientsList.add(it.secondName) }

        clientsList.add(callData_mainMenu)
        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, "$text_allAddedOne${clients.size}$text_allAddedTwo")
        editMessageText.replyMarkup = createDataButtonSet(clientsList, returnBackData)
        return editMessageText
    }

    // –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫—É –∫–ª–∏–µ–Ω—Ç–∞
    fun receiveClientRemark(stringChatId: String, callBackData: String, intMessageId: Int, tempData: HashMap<String, String>,
                            savedId: HashMap<String, Long>, clientRepository: ClientDataDao): EditMessageText {
        val clientId = callBackData.replace(callData_clientRemark, "").toLong()
        val client: ClientData = clientRepository.findById(clientId).get()
        val editMessageText = EditMessageText()
        val remarkText = "$text_addRemarkOne${client.remark}$text_addRemarkTwo"

        editMessageText.putData(stringChatId, intMessageId, remarkText)

        if (client.remark.isEmpty()){
            editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        } else {
            editMessageText.replyMarkup = receiveTwoButtonsMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu,
                    "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏", "$callData_delClientRemark$clientId")
        }
        savedId[stringChatId] = clientId
        tempData[stringChatId] = input_remark
        return editMessageText
    }

    // –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –ø—Ä–∏—ë–º–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    fun putSendMessageTime(longChatId: Long, stringChatId: String, intMessageId: Int, putTime: Int,
                           userRepository: UserDao): EditMessageText {
        val user: User = userRepository.findById(longChatId).get()
        val sendMessageTime: Int = user.sendTime

        when {
            putTime == -1 && sendMessageTime > 6 -> user.sendTime = sendMessageTime - 1
            putTime == 1 && sendMessageTime < 22 -> user.sendTime = sendMessageTime + 1
        }
        userRepository.save(user)
        return receiveUserSettingsMenu(stringChatId, intMessageId, user)
    }

    // –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–µ–º–µ —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    fun putSendMessageDay(longChatId: Long, stringChatId: String, intMessageId: Int, putDay: Int,
                          userRepository: UserDao): EditMessageText {
        val user = userRepository.findById(longChatId).get()
        val sendMessageDay = user.sendBeforeDays

        when {
            putDay == -1 && sendMessageDay > 1 -> user.sendBeforeDays = sendMessageDay - 1
            putDay == 1 && sendMessageDay < 3 -> user.sendBeforeDays = sendMessageDay + 1
        }

        userRepository.save(user)
        return receiveUserSettingsMenu(stringChatId, intMessageId, user)
    }

    // –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç –ú—Å–∫.
    fun putTimeZone(longChatId: Long, stringChatId: String, intMessageId: Int, putTimeZone: Int,
                    userRepository: UserDao): EditMessageText {
        val user = userRepository.findById(longChatId).get()
        val timeZoneHour = user.timeZone

        when {
            putTimeZone == -1 && timeZoneHour > -5 -> user.timeZone = timeZoneHour - 1
            putTimeZone == 1 && timeZoneHour < 10 -> user.timeZone = timeZoneHour + 1
        }

        userRepository.save(user)
        return receiveUserSettingsMenu(stringChatId, intMessageId, user)
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–æ–º —Å–≤–æ–µ–π –∑–∞–ø–∏—Å–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
    fun receiveAppointmentForClient(longChatId: Long, stringChatId: String, intMessageId: Int, userRepository: UserDao,
                                    clientRepository: ClientDataDao): EditMessageText {
        val formatter: DateTimeFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")
        val editMessageText = EditMessageText()
        val clients: List<ClientData> = clientRepository.findAll().filter { it.chatId == longChatId &&
                it.appointmentDate.length == 10 }.sortedBy { it.appointmentTime }.sortedBy { it.appointmentDate }

        if (clients.isEmpty()) {
            editMessageText.putData(stringChatId, intMessageId, text_notAppointment)
        } else {
            val textForMessage = StringBuilder()
            textForMessage.append(text_appointmentOne)
            clients.forEach { textForMessage.append("\n\uD83D\uDD39 ${formatter.format(LocalDate.parse(it.appointmentDate))} " +
               "–≤ ${it.appointmentTime}$text_appointmentTwo${userRepository.findById(it.specialistId).get().getFullName()}") }
            editMessageText.putData(stringChatId, intMessageId, textForMessage.toString())
        }
        editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        return editMessageText
    }

    // –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É —É –∫–ª–∏–µ–Ω—Ç–∞
    fun deleteClientRemark(stringChatId: String, callBackData: String, intMessageId: Int,
                           clientRepository: ClientDataDao): EditMessageText {
        val clientId = callBackData.replace(callData_delClientRemark, "").toLong()
        val client = clientRepository.findById(clientId).get()
        client.remark = ""
        clientRepository.save(client)

        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, text_remarkDeleted)
        editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callData_mainMenu)
        return editMessageText
    }

    // –ú–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è –¥–ª—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    fun receiveUserPasswordMenu(longChatId: Long, stringChatId: String, intMessageId: Int, tempData: HashMap<String,
            String>, userRepository: UserDao): EditMessageText {
        val user = userRepository.findById(longChatId).get()
        val editMessageText = EditMessageText()

        if (user.password.isEmpty()){
            editMessageText.putData(stringChatId, intMessageId, text_addPassword)
            tempData[stringChatId] = input_password
        } else {
            editMessageText.putData(stringChatId, intMessageId, text_hasPassword)
            tempData[stringChatId] = input_oldPassword
        }
        editMessageText.replyMarkup = receiveOneButtonMenu("\uD83D\uDD19  –û—Ç–º–µ–Ω–∞", callData_mainMenu)
        return editMessageText
    }

    // –ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    fun addNewClient(stringChatId: String, intMessageId: Int, isSubscriptionExpire: Boolean): EditMessageText {
        val editMessageText: EditMessageText
        if (isSubscriptionExpire) {
            editMessageText = receiveSubscriptionMessage(intMessageId, stringChatId)
        } else {
            editMessageText = EditMessageText()
            editMessageText.putData(stringChatId, intMessageId, text_addNewClient)
            val settingList = listOf(callData_generateCode, callData_addCommonClient, callData_mainMenu)
            editMessageText.replyMarkup = createButtonSet(settingList)
        }
        return editMessageText
    }

    // –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    fun receiveInvoiceLink(stringChatId: String, textForDescription: String): CreateInvoiceLink {
    val jsonBill: String = getBillForProvider()
    val labeledPriceList: List<LabeledPrice> = listOf(LabeledPrice("–û–ø–ª–∞—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞", config_subscriptionPrice * 100))
        return CreateInvoiceLink("–ê–±–æ–Ω–µ–Ω—Ç—Å–∫–∞—è –ø–ª–∞—Ç–∞", // @NonNull String title
            textForDescription, // @NonNull String description
            stringChatId, // @NonNull String payload - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã, 1-128 –±–∞–π—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –≤–∏–¥–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Å–≤–æ–∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                config_payToken, // @NonNull String providerToken - —Ç–æ–∫–µ–Ω –±–∞–Ω–∫–∞/–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π - "381764678:TEST:62053", // @NonNull String providerToken
            "RUB", // @NonNull String currency (–≤–∞–ª—é—Ç–∞)
            labeledPriceList, // @NonNull List<LabeledPrice> prices
            "https://i.postimg.cc/dQRk4Vmd/pmpaylogo.png", // String photoUrl - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏
            null, null, null, //  Integer photoSize, Integer photoWidth, Integer photoHeight

            // Boolean needName, Boolean needPhoneNumber, Boolean needEmail, Boolean needShippingAddress, Boolean isFlexible, Boolean sendPhoneNumberToProvider, Boolean sendEmailToProvider
            false, false, false, false /* needShippingAddress */, false /* isFlexible - —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ */, false/* sendPhoneNumberToProvider */, false,
                jsonBill, // String providerData - JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—á–µ—Ç–µ-—Ñ–∞–∫—Ç—É—Ä–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —É—Å–ª—É–≥ "{\"–¢–µ–∫—Å—Ç\": \"–¢–µ–∫—Å—Ç\",\"–ß–∏—Å–ª–æ\": 12345}"
            0, // Integer maxTipAmount - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–µ–≤—ã—Ö
            null)
    }

    // –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    fun receivePayMenu(stringChatId: String, intMessageId: Int, payLync: String, textForMessage: String): EditMessageText {
        val editMessageText = EditMessageText()
        editMessageText.putData(stringChatId, intMessageId, textForMessage)
        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val rowsInline = ArrayList<List<InlineKeyboardButton>>()
        val firstRowInlineButton = ArrayList<InlineKeyboardButton>()

        val firstButton = InlineKeyboardButton()
        firstButton.putData("\uD83D\uDD19  –û—Ç–º–µ–Ω–∞", callData_startMenu)
        firstRowInlineButton.add(firstButton)

        val secondButton = InlineKeyboardButton()
        secondButton.putData("–û–ø–ª–∞—Ç–∏—Ç—å", callData_startMenu)
        secondButton.url = payLync
        firstRowInlineButton.add(secondButton)

        rowsInline.add(firstRowInlineButton)
        inlineKeyboardMarkup.keyboard = rowsInline
        editMessageText.replyMarkup = inlineKeyboardMarkup
        return editMessageText
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è backup-–ª–∏—Å—Ç–∞
    fun receiveClientList(userId: Long, clientRepository: ClientDataDao): String {
        val stringBuilder = StringBuilder()
        clientRepository.findAll().filter { it.specialistId == userId }.sortedBy { it.appointmentDate }.
        forEach { stringBuilder.append("${it.getFullName()}, –∑–∞–ø–∏—Å—å: ${it.appointmentDate} - ${it.appointmentTime}; " +
                "–∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: ${it.remark}.\n") }
        return stringBuilder.toString()
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ txt.-—Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    fun receiveBackupList(stringChatId: String, fileDirectory: String): SendDocument {
        val sendDocument = SendDocument()
        sendDocument.document = InputFile(File(fileDirectory))
        sendDocument.caption = text_backupText
        sendDocument.replyMarkup = receiveOneButtonMenu(okButton, callData_delMessage)
        sendDocument.disableNotification = true
        sendDocument.chatId = stringChatId
        return sendDocument
    }

    // –î–∞–Ω–Ω—ã–µ –æ —Å—á–µ—Ç–µ-—Ñ–∞–∫—Ç—É—Ä–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
    private fun getBillForProvider(): String {
        val uuidString: UUID = UUID.randomUUID()
        return "{" +
                "\"amount\": {" +
                "\"–û–ø–ª–∞—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞\": \"$config_subscriptionPrice.00\"," +
                "\"currency\": \"RUB\"" +
                "}," +
                "\"payment_id\": \"$uuidString\"" +
                "}"
    }

    // –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞, —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
    fun receiveMonthNumber(updateMessageText: String): String {
        return when {
            updateMessageText.contains("—è–Ω–≤–∞—Ä", true) -> " 01"
            updateMessageText.contains("—Ñ–µ–≤—Ä–∞–ª", true) -> " 02"
            updateMessageText.contains("–º–∞—Ä—Ç", true) -> " 03"
            updateMessageText.contains("–∞–ø—Ä–µ–ª", true) -> " 04"
            updateMessageText.contains("–º–∞—è", true) -> " 05"
            updateMessageText.contains("–º–∞–π", true) -> " 05"
            updateMessageText.contains("–∏—é–Ω", true) -> " 06"
            updateMessageText.contains("–∏—é–ª", true) -> " 07"
            updateMessageText.contains("–∞–≤–≥—É—Å—Ç", true) -> " 08"
            updateMessageText.contains("—Å–µ–Ω—Ç—è–±—Ä", true) -> " 09"
            updateMessageText.contains("–æ–∫—Ç—è–±—Ä", true) -> "10"
            updateMessageText.contains("–Ω–æ—è–±—Ä", true) -> "11"
            updateMessageText.contains("–¥–µ–∫–∞–±—Ä", true) -> "12"
            else -> monthNotFoundText
        }
    }


}
